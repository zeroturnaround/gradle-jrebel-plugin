/**
 * To deploy to local maven repository, run:
 * ./gradlew publishToMavenLocal
 *
 * To release to Sonatype's central nexus, run:
 *   ./gradlew clean publish -Prelease_to_central
 *
 * To release to gradle plugin portal run:
 *   ./gradlew clean publishPlugins
 */
plugins {
  id "com.gradle.plugin-publish" version "1.3.1"
  id "org.sonarqube" version "6.3.1.5724"
  id "java-gradle-plugin"
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'project-report'
apply plugin: 'maven-publish'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

// Artifact settings

project.group = 'org.zeroturnaround'
project.version = '1.2.3-SNAPSHOT'

project.ext.name = 'JRebel Gradle plugin'
project.ext.description = 'JRebel Gradle plugin'
project.ext.vcs = 'https://github.com/zeroturnaround/gradle-jrebel-plugin'
project.ext.website = 'https://jrebel.com'

// Compiler settings (Gradle 2.0 requires Java 6+)
project.java.targetCompatibility = JavaVersion.VERSION_1_8
project.java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

configurations {
  deployerJars
  published.extendsFrom archives, signatures
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// add version of the plugin into MANIFEST.MF to add it into generated rebel.xml files
jar {
  manifest {
    attributes("Implementation-Version":project.version)
  }
}

javadoc {
  options.addBooleanOption('Xdoclint:none', true)
}

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

// === Dependency management

dependencies {
  compileOnly gradleApi()

  implementation 'commons-lang:commons-lang:2.6'

  testImplementation gradleTestKit()
  testImplementation 'junit:junit:4.13.1'
  testImplementation 'xmlunit:xmlunit:1.6'
  testImplementation 'org.hamcrest:hamcrest-library:1.3'
  testImplementation 'commons-io:commons-io:2.15.0'

  deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.12'

  testRuntimeOnly files(createClasspathManifest)
}

repositories {
  mavenCentral()
}

// =========================== TESTING ===========================

// Run tests before installing the artifact
jar.dependsOn(test)

// =========================== PUBLISHING ===========================

java {
  withSourcesJar()
  withJavadocJar()
  toolchain {
    languageVersion = JavaLanguageVersion.of(17) // build plugin with Java 17
  }
}

def gradleMatrix = [
        8 : ['2.8', '2.14', '3.0', '3.1', '3.2.1', '3.3', '3.4.1', '3.5.1', '4.0', '4.10.3', '5.0', '5.2.1', '6.0.1', '6.9.4', '7.0'],
        17: ['7.3', '7.6.6', '8.0', '8.14.3', '9.0.0']
]

gradleMatrix.each { javaVersion, gradleVersions ->
  tasks.register("gradleOnJava${javaVersion}Test", Test) {
    group = "verification"
    description = "Runs plugin tests against Gradle ${gradleVersions} on Java ${javaVersion}"
    dependsOn tasks.testClasses
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/*FunctionalIntegrationTest.class'

    javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(javaVersion)
    }

    // Pass all versions for this Java runtime to the test
    systemProperty "tested.gradle.versions", gradleVersions.join(",")
    useJUnit()
  }
}

tasks.named('check') {
  dependsOn tasks.matching { it.name.startsWith('gradleOnJava') }
}

tasks.named('jar') {
  dependsOn tasks.matching { it.name.startsWith('gradleOnJava') }
}

tasks.named('test') {
  exclude '**/*FunctionalIntegrationTest.class'
}

gradlePlugin {
  website = project.ext.website
  vcsUrl = project.ext.vcs
  description = project.ext.description

  plugins {
    jrebel {
      id = 'org.zeroturnaround.gradle.jrebel'
      implementationClass = 'org.zeroturnaround.jrebel.gradle.RebelPlugin'
      tags = ['JRebel', 'rebel.xml', 'ZeroTurnaround']
      displayName = project.ext.name
      description = project.ext.description
    }
  }
}

// Required data for maven central
def pomFile = {
  name = project.ext.name
  description = project.ext.description
  url = project.ext.website
  licenses {
    license {
      name = 'The Apache Software License, Version 2.0'
      url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      distribution = 'repo'
    }
  }
  developers {
    developer {
      id = 'jrebel_support'
      name = 'JRebel Support'
      email = 'support@jrebel.com'
    }
  }
  inceptionYear = '2011'
  scm {
    url = 'https://github.com/zeroturnaround/gradle-jrebel-plugin'
    connection = 'scm:git:git@github.com:zeroturnaround/gradle-jrebel-plugin.git'
    developerConnection = 'scm:git:git@github.com:zeroturnaround/gradle-jrebel-plugin.git'
  }
}

publishing {
  publications {
    pluginMaven(MavenPublication) { // publication name is defined by java-gradle-plugin
      pom pomFile
    }
  }
  repositories {
    maven {
      // Use sonatype central
      if (project.hasProperty("release_to_central")) {
        if (project.version.endsWith("-SNAPSHOT")) {
          name = 'sonatypeNexusSnapshots'
          url = 'https://central.sonatype.com/repository/maven-snapshots'
        } else {
          name = 'sonatypeNexusStaging'
          url = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2'
        }
      }
      // Use zeroturnaround public repo
      else {
        if (project.version.endsWith("-SNAPSHOT")) {
          name = 'zeroturnaroundNexusSnapshots'
          url = 'https://repos.zeroturnaround.com/nexus/content/repositories/zt-public-snapshots/'
        } else {
          name = 'zeroturnaroundNexusReleases'
          url = 'https://repos.zeroturnaround.com/nexus/content/repositories/zt-public-releases/'
        }
      }
      // name+"Username" and name+"Password" are looked up as credential properties
      credentials(PasswordCredentials)
    }
  }
}

afterEvaluate {
  publishing {
    publications {
      // Created by java-gradle-plugin very late, can't be configured above
      jrebelPluginMarkerMaven(MavenPublication) {
        pom pomFile
      }
    }
  }
  tasks.withType(PublishToMavenRepository) {
    // Releases can be published to plugin portal, don't need the marker nonsense (gradle could have designed plugin id as group:id so no redirection or conventions needed)
    onlyIf {
      project.version.endsWith("-SNAPSHOT") || publication != publishing.publications.jrebelPluginMarkerMaven
    }
  }
}

signing {
  required {
    gradle.taskGraph.hasTask(publish) || gradle.taskGraph.hasTask(publishPlugins)
  }
  sign publishing.publications.pluginMaven
}

// java-gradle-plugin creates name+"PluginMarkerMaven" in afterEvaluate
afterEvaluate {
  signing {
    sign publishing.publications.jrebelPluginMarkerMaven
  }
}
