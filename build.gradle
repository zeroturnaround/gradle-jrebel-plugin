/**
 * To deploy to local maven repository, run:
 * ./gradlew install -x sign
 *
 * To release to Sonatype's central nexus, run:
 *   ./gradlew clean release -Prelease_to_central
 *
 * To release to gradle plugin portal run:
 *   ./gradlew clean publishPlugins
 */
plugins {
  id "com.gradle.plugin-publish" version "0.9.9"
  id "org.sonarqube" version "2.6"
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

// Artifact settings

project.group = 'org.zeroturnaround'
project.version = '1.1.11-SNAPSHOT'

project.ext.name = 'JRebel Gradle plugin'
project.ext.description = 'JRebel Gradle plugin'
project.ext.vcs = 'https://github.com/zeroturnaround/gradle-jrebel-plugin'
project.ext.website = 'https://jrebel.com'

// Compiler settings (Gradle 2.0 requires Java 6+)
targetCompatibility = "1.6"
sourceCompatibility = "1.6"

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

configurations {
  deployerJars
  published.extendsFrom archives, signatures
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// === Dependency management

dependencies {
  compileOnly gradleApi()

  implementation 'commons-lang:commons-lang:2.6'
  implementation 'commons-io:commons-io:2.5'

  testImplementation gradleTestKit()
  testImplementation 'junit:junit:4.13.1'
  testImplementation 'xmlunit:xmlunit:1.6'
  testImplementation 'org.hamcrest:hamcrest-library:1.3'
  testImplementation 'commons-io:commons-io:2.6'

  deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.12'

  testRuntimeOnly files(createClasspathManifest)
}

repositories {
  mavenCentral()
}

// add version of the plugin into MANIFEST.MF to add it into generated rebel.xml files
jar {
  manifest {
    attributes("Implementation-Version":project.version)
  }
}

/**
* This method helps to run certain parts of config only when these tasks are really going to be executed.
* This is very useful as to not force somebody who just wants to build locally define nexus usernames/passwords, etc.
*/
def onlyFor(task, config) {
 gradle.taskGraph.whenReady { graph ->
   if (graph.hasTask(task)) {
     project.configure(project, config)
   }
 }
}

// =========================== TESTING ===========================

// Run tests before installing the artifact
jar.dependsOn(test)

// =========================== PUBLISHING ===========================

// Contents of pom.xml that will be created for publishing to the maven-style artifact repository
def pomFile = pom {
  project {
    name project.ext.name
    description project.ext.description
    url project.ext.website
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    developers {
      developer {
        id 'jrebel_support'
        name 'JRebel Support'
        email 'support@jrebel.com'
      }
    }
    inceptionYear '2011'
    scm {
      url 'https://github.com/zeroturnaround/gradle-jrebel-plugin'
      connection 'scm:git:git@github.com:zeroturnaround/gradle-jrebel-plugin.git'
      developerConnection 'scm:git:git@github.com:zeroturnaround/gradle-jrebel-plugin.git'
    }
  }
}

onlyFor(uploadPublished) {
  uploadPublished {
    repositories {
      mavenDeployer {
        configuration = configurations.deployerJars

        // Use sonatype central
        if (project.hasProperty("release_to_central")) {
          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: sonatypeNexusStagingUsername, password: sonatypeNexusStagingPassword)
          }

          snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: sonatypeNexusSnapshotsUsername, password: sonatypeNexusSnapshotsPassword)
          }
        }

        // Use zeroturnaround central
        else {
          repository(url: 'https://repos.zeroturnaround.com/nexus/content/repositories/zt-public-releases/') {
            authentication(userName: zeroturnaroundNexusReleasesUsername, password: zeroturnaroundNexusReleasesPassword)
          }

          snapshotRepository(url: 'https://repos.zeroturnaround.com/nexus/content/repositories/zt-public-snapshots/') {
            authentication(userName: zeroturnaroundNexusSnapshotsUsername, password: zeroturnaroundNexusSnapshotsPassword)
          }
        }

        pom = pomFile
      }
    }
  }
}

signing {
  required { gradle.taskGraph.hasTask("release") }
  sign configurations.archives
}

task release( dependsOn: uploadPublished ) {
  description = 'Releases the plugin, sign artifacts and upload them to Nexus. The bundle with artifacts for Sonatype is included into release.'
}

javadoc {
  options.addBooleanOption('Xdoclint:none', true)
}

// Prepare bundle for Sonatype
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

class GeneratePomTask extends DefaultTask {
  File destFile
}

task generatePom(type: GeneratePomTask) {
  destFile = file("${buildDir}/generatedPoms/${project.name}-${project.version}.pom")

  inputs.file project.buildFile
  outputs.file destFile
  enabled = false

  doLast {
    println "Generate POM into " + destFile
    pomFile.writeTo(destFile)
  }
}

signArchives.dependsOn generatePom

// portal task publishPlugins generates own pom.xml
onlyFor(uploadPublished) {
  generatePom.enabled = true
  artifacts {
    archives (generatePom.destFile) {
      name 'pom'
      type 'pom'
    }
  }

  println 'Project artifacts: ' + artifacts
}

// Define list of artifacts
artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

pluginBundle {
  website = project.ext.website
  vcsUrl = project.ext.vcs
  description = project.ext.description
  tags = ['JRebel', 'rebel.xml', 'ZeroTurnaround']

  plugins {
    rebelPlugin {
      id = 'org.zeroturnaround.gradle.jrebel'
      displayName = project.ext.name
    }
  }
}
